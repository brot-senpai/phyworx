{"version":3,"sources":["components/babylon/sceneComponent.jsx","components/home/home.js","components/babylon/physworld/collision.js","components/babylon/physworld/physworld.js","components/babylon/glbLoader.js","img/atom.svg","img/sigma.svg","img/babylon_gray2.svg","components/header/header2.js","App.js","reportWebVitals.js","index.js"],"names":["props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","useEffect","current","engine","Engine","resize","scene","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","getEngine","window","addEventListener","dispose","removeEventListener","width","innerWidth","height","innerHeight","ref","camera","ArcRotateCamera","Vector3","useAutoRotationBehavior","canvas","getRenderingCanvas","attachControl","clearColor","Color3","enablePhysics","SpotLight","Math","PI","diffuse","environment","createDefaultEnvironment","skyboxSize","ground","position","y","setMainColor","Mesh","CreateBox","scaling","sphere","MeshBuilder","CreateSphere","diameter","segments","computeWorldMatrix","ground_worldMatrix","getWorldMatrix","ground_vertexData","getVerticesData","groundNormal","TransformNormal","reflector","Plane","FromPositionAndNormal","scale","mirrorMaterial","StandardMaterial","reflectionTexture","MirrorTexture","mirrorPlane","renderList","level","material","alphaMode","ALPHA_ONEONE","physicsImpostor","PhysicsImpostor","BoxImpostor","mass","restitution","alpha","p3","p3mat","emissiveColor","bakeCurrentTransformIntoVertices","x","sin","z","cos","trail","TrailMesh","sourceMat","Black","onBeforeRenderObservable","add","id","CANNON","setTarget","Zero","HemisphericLight","gravityVector","skyMaterial","GridMaterial","majorUnitFrequency","minorUnitVisibility","gridRatio","mainColor","lineColor","backFaceCulling","CreateGround","backgroundMaterial","BackgroundMaterial","diffuseTexture","Texture","process","advancedTexture","AdvancedDynamicTexture","CreateFullscreenUI","diffuseColor","velocity","play","rect1","Rectangle","cornerRadius","color","thickness","background","addControl","linkOffsetY","rect2","sphere1","rotate","SphereImpostor","friction","setLinearVelocity","linkWithMesh","label1","TextBlock","text","getLinearVelocity","_x","bgMat","sphere2","label2","setInterval","toFixed","act","menuButton","Button","CreateSimpleButton","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_BOTTOM","onPointerDownObservable","input","InputText","VERTICAL_ALIGNMENT_TOP","onTextChangedObservable","displayGrid","SelectionPanel","top","left","Collision","White","intensity","SceneLoader","RegisterPlugin","GLTFFileLoader","IncrementalLoading","Append","createDefaultCameraOrLight","activeCamera","Grid","drawerWidth","useStyles","makeStyles","theme","root","display","appBar","backgroundColor","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","PersistentDrawerLeft","classes","useTheme","React","useState","open","setOpen","className","CssBaseline","AppBar","clsx","Toolbar","IconButton","aria-label","onClick","edge","Drawer","variant","anchor","paper","direction","Divider","to","style","textDecoration","ListItem","button","ListItemIcon","ListItemText","src","Sigma","alt","Atom","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c06d9cc8.chunk.js","sourcesContent":["import { Engine, Scene } from '@babylonjs/core';\nimport React, { useEffect, useRef } from 'react';\n\nimport '../../App.css'\n\nexport default (props) => {\n    const reactCanvas = useRef(null);\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, \n        onRender, onSceneReady, ...rest } = props;\n    \n    useEffect(() =>{\n        if(reactCanvas.current){\n            const engine = new Engine(reactCanvas.current, antialias,\n                engineOptions, adaptToDeviceRatio);\n            engine.resize();\n            const scene = new Scene(engine, sceneOptions);\n            if(scene.isReady()){\n                props.onSceneReady(scene)\n            }\n            else{\n                scene.onReadyObservable.addOnce(scene => props.\n                    onSceneReady(scene));\n            }\n            engine.runRenderLoop(() => {\n                if(typeof onRender === 'function'){\n                    onRender(scene);\n                }\n                scene.render();\n            })\n\n            const resize = () =>{\n                scene.getEngine().resize();\n                \n            }\n\n            if(window){\n                window.addEventListener('resize', resize);\n            }\n            return () =>{\n                scene.getEngine().dispose();\n                if(window){\n                    window.removeEventListener('resize', resize);\n                }\n            }\n        }\n    }, [reactCanvas])\n\n    return(\n        \n        <canvas         \n        width={window.innerWidth} \n        height={window.innerHeight-50} \n        ref={reactCanvas} {...rest} />\n        \n    )\n\n}","import React from 'react';\nimport { ArcRotateCamera, \n    Vector3, \n    Color3, \n    MeshBuilder,\n    TrailMesh,\n    StandardMaterial,\n    SpotLight,\n    Mesh,\n    Engine,\n    PhysicsImpostor,\n    Plane,\n    MirrorTexture\n} from '@babylonjs/core';\nimport SceneComponent from '../babylon/sceneComponent';\n\n\n\nconst onSceneReady = scene =>{\n    var beta = 0;\n    var camera = new ArcRotateCamera(\"ArcRotateCamera\", beta, 1.2, 40, \n        new Vector3(0, 0, 0), scene);\n        camera.useAutoRotationBehavior = true;\n    //camera.setTarget(Vector3.Zero());\n    const canvas = scene.getEngine().getRenderingCanvas();\n    camera.attachControl(canvas, true);\n    scene.clearColor = new Color3(0.0, 0.0, 0.0);\n    scene.enablePhysics();\n\n    /* var light = new HemisphericLight(\"light\", new Vector3(1,1,0), scene);\n    light.intensity = 0.7; */\n    var light = new SpotLight(\"spotLight\", new Vector3(0, 4, 0), \n        new Vector3(0, -1, 0), Math.PI , .5, scene);\n\tlight.diffuse = new Color3(1, 0, 0);\n    \n    var environment = scene.createDefaultEnvironment({\n        skyboxSize: 300\n    });\n    environment.ground.position.y = -5;\n    environment.setMainColor(new Color3(0, 0, 0));\n    var ground = Mesh.CreateBox(\"Ground\", 1, scene);\n    ground.scaling = new Vector3(200, 1, 200);\n    ground.position.y = environment.ground.position.y - (0.5 + 0.001)\n\n    var sphere = MeshBuilder.CreateSphere(\"sphere\", \n        {diameter: 5, segments: 128}, scene);\n    \n\n    ground.computeWorldMatrix(true);\n    var ground_worldMatrix = ground.getWorldMatrix();\n    var ground_vertexData = ground.getVerticesData(\"normal\");\n    var groundNormal = new Vector3(ground_vertexData[0],\n        ground_vertexData[1], ground_vertexData[2]);\n    groundNormal = Vector3.TransformNormal(groundNormal, ground_worldMatrix);\n\n    var reflector = new Plane.FromPositionAndNormal(ground.position, \n        groundNormal.scale(-1));\n    var mirrorMaterial = new StandardMaterial(\"mirror\", scene)\n    mirrorMaterial.reflectionTexture = new MirrorTexture(\"mirror\", 1024, scene, true);\n    mirrorMaterial.reflectionTexture.mirrorPlane = reflector;\n\tmirrorMaterial.reflectionTexture.renderList = [sphere];\n    mirrorMaterial.reflectionTexture.level = 1;\n    ground.material = mirrorMaterial;\n    //ground.material.alpha = 0.99;\n    ground.material.alphaMode = Engine.ALPHA_ONEONE;\n    ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, {\n        mass: 0,\n        restitution: 0.6\n    })\n\n    var alpha = Math.PI/30;\n    \n    // Create a mesh for the trail to follow.\n    \n    /* var p1 = MeshBuilder.CreateSphere(\"p1\", \n        {diameter: 1, segments: 128}, scene);\n    var p1mat = new StandardMaterial(\"p1\", scene);\n    p1mat.emissiveColor = new Color3.White();\n    p1.material = p1mat;\n    p1.bakeCurrentTransformIntoVertices();\n    p1.position.x = Math.sin(gamma)*10;\n    p1.position.y = Math.cos(gamma)*9;\n    p1.position.z = Math.cos(gamma)*10;\n    p1.computeWorldMatrix(true);\n    var t1= new TrailMesh('new', p1, scene, .25, 250, true);\n    var s1 = new StandardMaterial('sourceMat', scene);\n    s1.emissiveColor = new Color3.White(); */\n    //sourceMat.diffuseColor = new Color3.Red();\n    //sourceMat.specularColor = new Color3.Black();\n    //t1.material = s1;\n    \n\n    /* var p2 = MeshBuilder.CreateSphere(\"p2\", \n        {diameter: 1, segments: 128}, scene);\n    var p2mat = new StandardMaterial(\"p2\", scene);\n    p2mat.emissiveColor = new Color3.White();\n    p2.material = p2mat;\n    p2.bakeCurrentTransformIntoVertices();\n    p2.position.x = Math.cos(alpha)*-10;\n    p2.position.y = Math.sin(alpha)*-9;\n    p2.position.z = Math.sin(alpha)*10;\n    p2.computeWorldMatrix(true);\n    var t2 = new TrailMesh('new', p2, scene, .25, 250, true);\n    var s2 = new StandardMaterial('sourceMat', scene);\n    s2.emissiveColor = new Color3.White(); */\n    //sourceMat.diffuseColor = new Color3.Red();\n    //sourceMat.specularColor = new Color3.Black();\n    //t2.material = s2;\n\n    var p3 = MeshBuilder.CreateSphere(\"p2\", \n        {diameter: 1, segments: 128}, scene);\n    var p3mat = new StandardMaterial(\"p3\", scene);\n    p3mat.emissiveColor = new Color3(.2, .91, .91);\n    p3.material = p3mat;\n    p3.bakeCurrentTransformIntoVertices();\n    p3.position.x = Math.sin(alpha)*10;\n    p3.position.z = Math.cos(alpha)*10;\n    p3.computeWorldMatrix(true);\n    var trail = new TrailMesh('new', p3, scene, .5, 25, true);\n    var sourceMat = new StandardMaterial('sourceMat', scene);\n    sourceMat.emissiveColor = new Color3.Black()//Vector3(.2, .91, .97);\n    trail.material = sourceMat;\n    const observer = scene.onBeforeRenderObservable.add(animate);\n    \n    function animate() {\n        alpha += Math.PI/25;\n        \n        p3.position.x = Math.sin(alpha)*10;\n        p3.position.z = Math.cos(alpha)*10;\n        \n        //p3.position.y = Math.sin(gamma)*10;\n        /* p1.position.x = Math.sin(gamma)*10;\n        p1.position.y = Math.cos(gamma)*9;\n        p1.position.z = Math.cos(gamma)*10;\n        p2.position.x = Math.cos(alpha)*-10;\n        p2.position.y = Math.sin(alpha)*-9;\n        p2.position.z = Math.sin(alpha)*10; */\n        //beta += Math.PI/5;\n        //camera.position = new Vector3(Math.sin(beta), 1.2, 35)\n        \n\n        \n    }\n    \n\n\n\n}\n\n\nexport default () => (\n    <div>\n        <SceneComponent antialias onSceneReady={onSceneReady}\n        id='my-canvas' />\n    </div>\n)","//import React from 'react';\nimport { \n    Color3,\n    Vector3, \n    Mesh,\n    PhysicsImpostor,\n    StandardMaterial,\n    Texture,\n    BackgroundMaterial\n    } from '@babylonjs/core';\nimport { \n    AdvancedDynamicTexture,\n    Button,\n    Control,\n    SelectionPanel,\n    InputText,\n    TextBlock,\n    Rectangle,\n    } from \"@babylonjs/gui\";\nimport * as CANNON from 'cannon';\nwindow.CANNON = CANNON;\n\n\nexport default (scene) =>{\n\n  var advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n  \n  var material = new StandardMaterial(scene);\n  material.diffuseColor = new Color3(1.0, 0, 0);\n\n  var velocity = 5;\n\n  \n  function play(){\n    \n    var rect1 = new Rectangle();\n    rect1.width = 0.2;\n    rect1.height = \"20px\";\n    rect1.cornerRadius = 20;\n    rect1.color = \"red\";\n    rect1.thickness = 1;\n    rect1.background = \"white\";\n    advancedTexture.addControl(rect1);\n    \n    rect1.linkOffsetY = -50;\n\n    var rect2 = new Rectangle();\n    rect2.width = 0.2;\n    rect2.height = \"20px\";\n    rect2.cornerRadius = 20;\n    rect2.color = \"red\";\n    rect2.thickness = 1;\n    rect2.background = \"white\";\n    advancedTexture.addControl(rect2);\n    \n    rect2.linkOffsetY = -50;\n\n    var backgroundMaterial = new StandardMaterial(\"backgroundMaterial\", scene);\n    var sphere1 = Mesh.CreateSphere(\"sphere1\", 16, 1, scene);\n    backgroundMaterial.diffuseTexture = new Texture(process.env.PUBLIC_URL + '/assets/osu.png', scene);\n    sphere1.material = backgroundMaterial;\n    sphere1.position = new Vector3(-2, 2, 0);\n    sphere1.rotate(new Vector3(0, 0, 4), 3)\n    sphere1.physicsImpostor = new PhysicsImpostor(sphere1, PhysicsImpostor.SphereImpostor,\n      {mass:1.5, restitution: 1.0, friction:0}, scene);\n    sphere1.physicsImpostor.setLinearVelocity(new Vector3(velocity, 0, 0));\n    \n    rect1.linkWithMesh(sphere1);   \n    var label1 = new TextBlock();\n    label1.text = sphere1.physicsImpostor.getLinearVelocity()._x +' m/s';\n    rect1.addControl(label1)\n\n    var bgMat = new StandardMaterial(\"bg2\", scene);\n    bgMat.diffuseTexture = new Texture(process.env.PUBLIC_URL + '/assets/Mi.png', scene);\n    var sphere2 = Mesh.CreateSphere(\"sphere1\", 16, 1, scene);\n    sphere2.position = new Vector3(2, 2, 0);\n    sphere2.material = bgMat;\n    sphere2.rotate(new Vector3(0, 0, 4), 3);\n    sphere2.physicsImpostor = new PhysicsImpostor(sphere2, PhysicsImpostor.SphereImpostor,\n      {mass:1, restitution: 1.0, friction:0}, scene);\n\n    rect2.linkWithMesh(sphere2);   \n    var label2 = new TextBlock();\n    \n    label2.text = sphere2.physicsImpostor.getLinearVelocity()._x +' m/s';    \n    rect2.addControl(label2);\n\n    var t = window.setInterval(timer, 100);\n    function timer(){\n      label2.text = sphere2.physicsImpostor.getLinearVelocity()._x.toFixed(2) +' m/s';\n      label1.text = sphere1.physicsImpostor.getLinearVelocity()._x.toFixed(2) +' m/s';\n    };\n\n    \n    \n  }\n  var act = true;\n  var menuButton = new Button.CreateSimpleButton(\"menu\", \"Start\");\n  menuButton.color = \"black\";\n  menuButton.width = 1;\n  menuButton.height = \"40px\";\n  menuButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n  menuButton.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n  \n  \n  menuButton.onPointerDownObservable.add(function(){\n    if(act === true){\n      play();\n      act = false;\n      ;}\n    else{\n      play();\n      act = true;\n    }\n    \n  })\n  \n  var input = new InputText(\"Enter\");\n  input.width = 1;\n  input.text = \"Enter velocity\";\n  input.height = \"40px\";\n  input.background = \"black\";\n  input.color = \"white\";\n  input.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n  input.onPointerDownObservable.add(function(){\n    input.text = \"\";\n  })\n  input.onTextChangedObservable.add(function(){\n    velocity = input.text;\n  })\n  scene.enablePhysics();\n\n  var displayGrid = new SelectionPanel(\"sp\", []);\n    displayGrid.color = \"black\";  \n    displayGrid.width = \"150px\";\n    displayGrid.height = \"100px\";\n    displayGrid.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    displayGrid.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    displayGrid.top = \"60px\";\n    displayGrid.left = \"80px\";\n\n    advancedTexture.addControl(displayGrid);\n    displayGrid.addControl(menuButton)\n    displayGrid.addControl(input);\n}","import React from 'react';\nimport { ArcRotateCamera, \n    Vector3, \n    Color3, \n    HemisphericLight,\n    MeshBuilder,\n    Mesh,\n    Texture,\n    BackgroundMaterial, \n    } from '@babylonjs/core';\nimport { GridMaterial } from \"@babylonjs/materials/grid\";\nimport SceneComponent from '../sceneComponent';\nimport * as CANNON from 'cannon';\nimport Collision from './collision';\nwindow.CANNON = CANNON;\n\nconst onSceneReady = scene =>{\n    var camera = new ArcRotateCamera(\"ArcRotateCamera\", 4.7, 1.2, 12, \n        new Vector3(0, 0, 0), scene);\n    camera.setTarget(Vector3.Zero());\n    const light = new HemisphericLight(\"light\", new Vector3(1, 1, 0));\n    const canvas = scene.getEngine().getRenderingCanvas();\n    camera.attachControl(canvas, true);\n    var gravityVector = new Vector3(0, 0, 0);\n    scene.enablePhysics(gravityVector);\n    \n      \n    var skyMaterial = new GridMaterial(\"skyMaterial\", scene);\n      skyMaterial.majorUnitFrequency = 6;\n      skyMaterial.minorUnitVisibility = 0.43;\n      skyMaterial.gridRatio = 0.5;\n      skyMaterial.mainColor = new Color3(1, 1, 1);\n      skyMaterial.lineColor = new Color3(0, 1.0, 1.0);\t\n      skyMaterial.backFaceCulling = false;\n\n    var skySphere = Mesh.CreateSphere(\"skySphere\", 30, 90, scene);\n      skySphere.material = skyMaterial;\n\n    var ground = MeshBuilder.CreateGround(\"ground1\", {width:6, height:6}, scene);\n    var backgroundMaterial = new BackgroundMaterial(\"backgroundMaterial\", scene);\n    backgroundMaterial.diffuseTexture = new Texture(process.env.PUBLIC_URL + '/assets/osu.png', scene);\n    ground.material = backgroundMaterial;\n    //ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.9 }, scene);\n    \n\n    //Menu();\n    Collision(scene);\n\n}\n\n\nexport default () => (\n    <div>\n        <SceneComponent antialias onSceneReady={onSceneReady}\n        id='my-canvas' />\n    </div>\n)","import React from 'react';\nimport { ArcRotateCamera, \n    Vector3, \n    HemisphericLight, \n    SceneLoader,\n    Color3, \n    \n    } from '@babylonjs/core';\nimport SceneComponent from './sceneComponent';\nimport { GLTFFileLoader } from 'babylonjs-loaders';\n\n\nconst onSceneReady = scene =>{\n    var camera = new ArcRotateCamera(\"Camera\", 3 * Math.PI / 2, \n        3 * Math.PI / 8, 30, Vector3.Zero());\n    scene.clearColor = Color3.White();\n    const canvas = scene.getEngine().getRenderingCanvas();\n    camera.attachControl(canvas, true);\n    var light = new HemisphericLight(\"light\", new Vector3(0,1,0), scene);\n    light.intensity = 0.7;\n\n    \n    SceneLoader.RegisterPlugin(new GLTFFileLoader());\n    GLTFFileLoader.IncrementalLoading = false;\n    \n    \n   SceneLoader.Append(process.env.PUBLIC_URL + '/assets/', \"sol.glb\" , scene, function (scene) {\n      \n      scene.createDefaultCameraOrLight(true, true, true);\n\n      scene.activeCamera.alpha += Math.PI;\n    \n  });\n  \n\n  \n  \n\n}\n\n\n\n\nexport default function Grid () {\n    return(\n    <div>\n        <SceneComponent antialias onSceneReady={onSceneReady}\n        id='my-canvas' />\n    </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/atom.1651bc53.svg\";","export default __webpack_public_path__ + \"static/media/sigma.b3ee976d.svg\";","export default __webpack_public_path__ + \"static/media/babylon_gray2.a3cbb95f.svg\";","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport Home from '../home/home';\nimport PhysicsWorld from '../babylon/physworld/physworld';\nimport GLB from '../babylon/glbLoader';\nimport Atom from '../../img/atom.svg';\nimport BabylonIcon from '../../img/babylon_gray2.svg';\nimport Sigma from '../../img/sigma.svg';\n\nimport {\n    Switch,\n    Route,\n    Link, \n    HashRouter,\n  } from \"react-router-dom\";\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    backgroundColor: 'black',\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <HashRouter>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <Link to=\"/\" style={{ textDecoration: 'none' }}>\n        <ListItem button key='Home'>          \n          <ListItemIcon>\n              <HomeIcon />\n          </ListItemIcon>\n          <ListItemText style={{color:\"black\"}}>Home</ListItemText>          \n        </ListItem>\n        </Link>\n        <Divider />\n        <Link to=\"/phyworx/math\" style={{ textDecoration: 'none' }}>\n        <ListItem button key='Math' >        \n          <ListItemIcon >\n              <img src={ Sigma } alt=\"sigma\" height=\"25\"/>\n          </ListItemIcon>\n          <ListItemText style={{color:\"black\"}}>Math</ListItemText>        \n        </ListItem>\n        </Link>\n        <Link to=\"/phyworx/physics\" style={{ textDecoration: 'none' }}>\n        <ListItem button key='Physics'>        \n          <ListItemIcon>\n              <img src={ Atom } alt=\"atomicon\" height=\"25\"/>\n          </ListItemIcon>\n          <ListItemText style={{color:\"black\"}}>Physics</ListItemText>        \n        </ListItem>\n        </Link>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Switch>            \n            <Route exact path=\"/\" >\n            <Home />\n            </Route>      \n            <Route path=\"/phyworx/math\" >\n              <GLB />\n            </Route> \n            <Route path=\"/phyworx/physics\" >\n              <PhysicsWorld />\n            </Route>        \n        </Switch>\n        \n      </main>\n      </HashRouter>\n    </div>\n  );\n}\n","import './App.css';\n\nimport Header from \"./components/header/header2\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>    \n    <App />    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}